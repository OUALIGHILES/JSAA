// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  firstName     String
  lastName      String
  password      String    // Hashed password
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  emailVerified DateTime?
  image         String?   // Profile image URL
  accounts      Account[]
  sessions      Session[]
  tickets       Ticket[]
  subscriptions Subscription[]
}

// For OAuth authentication (Google, Facebook)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
model Team {
  id        String   @id @default(uuid())
  name      String   @unique
  classment Int      @default(3)
  logoUrl   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation to Subscription
  subscriptions Subscription[]

  // Relations
  homeMatches Match[] @relation("HomeTeam")
  awayMatches Match[] @relation("AwayTeam")
}

model Match {
  id        String   @id @default(uuid())
  homeTeamId String
  awayTeamId String
  place     String
  date      DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  homeTeam   Team     @relation("HomeTeam", fields: [homeTeamId], references: [id])
  awayTeam   Team     @relation("AwayTeam", fields: [awayTeamId], references: [id])

  // Relation to Ticket
  tickets    Ticket[]

  // Indexes for better query performance
  @@index([homeTeamId])
  @@index([awayTeamId])
  @@index([date])
}

model Ticket {
  id        String   @id @default(uuid())
  matchId   String
  userId    String
  quantity  Int      @default(1)
  price     Decimal
  status    TicketStatus @default(RESERVED)
  seatInfo  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  match     Match     @relation(fields: [matchId], references: [id])
  user      User      @relation(fields: [userId], references: [id])

  @@index([matchId])
  @@index([userId])
}

enum TicketStatus {
  RESERVED
  PAID
  CANCELLED
  USED
}

model Subscription {
  id            String   @id @default(uuid())
  userId        String
  teamId        String
  startDate     DateTime
  endDate       DateTime
  price         Decimal
  status        SubscriptionStatus @default(ACTIVE)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  user          User     @relation(fields: [userId], references: [id])
  team          Team     @relation(fields: [teamId], references: [id])

  @@index([userId])
  @@index([teamId])
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  CANCELLED
}